#!/usr/bin/perl

$combineFolder = shift;
$species=shift;
$species_full="Human" if $species eq "Hsa";
$species_full="Mouse" if $species eq "Mmu";

@files=glob($combineFolder . "/*.IR"); # This should take all the counts in the folder for "combine sample"
$N=$#files+1;

open (O, ">Coverage_key_DB-$species$N.tab"); # probably we want to build this in rather than print out as output file

### Loads the mappability. Any junctions that is not here, it's supposed to NOT HAVE mappability. This file was generated by Nuno.
open (MAPPABILITY, "/home/blencowe/blencowe1/mirimia/XPIPE/IR/$species/$species.IntronJunctions.new.50.8.uniquecount.txt") || die "file with mappabilities for $species";
while (<MAPPABILITY>){
    chomp;
    @temp=split(/\t/);
    ($event,$junction)=$temp[0]=~/(.+?\:.+?\:\d+)\-(E.+?)\:/;
    $mappability{$event}{$junction}=$temp[1];
}
close MAPPABILITY;

### For each file with counts
foreach $file (@files){
    ($sample)=$file=~/.+\/(.+?)\./;

    $samples{$sample}=1;
    open (IN, $file);
    <IN>;
    while (<IN>){ # Format:  Event_ID EIJ1 EIJ2 EEJ I
	chomp;
	@temp=split(/\t/);
	
	### The file has the corrected counts already
	$corrected_reads{$temp[0]}{'EI1'}{$sample}=$temp[1];
	$corrected_reads{$temp[0]}{'EI2'}{$sample}=$temp[2];
	$corrected_reads{$temp[0]}{'EE'}{$sample}=$temp[3];
	
	### if we have the raw reads, this will be way easier
	$raw_reads{$temp[0]}{'EI1'}{$sample}=sprintf("%.0f",$temp[1]*$mappability{$temp[0]}{'EI1'}/35) if $mappability{$temp[0]}{'EI1'};
	$raw_reads{$temp[0]}{'EI1'}{$sample}="ne" if !$mappability{$temp[0]}{'EI1'};
	$raw_reads{$temp[0]}{'EI2'}{$sample}=sprintf("%.0f",$temp[2]*$mappability{$temp[0]}{'EI2'}/35) if $mappability{$temp[0]}{'EI2'};
	$raw_reads{$temp[0]}{'EI2'}{$sample}="ne" if !$mappability{$temp[0]}{'EI2'};
	$raw_reads{$temp[0]}{'EE'}{$sample}=sprintf("%.0f",$temp[3]*$mappability{$temp[0]}{'EE'}/35) if $mappability{$temp[0]}{'EE'};
	$raw_reads{$temp[0]}{'EE'}{$sample}="ne" if !$mappability{$temp[0]}{'EE'};
    }
    close IN;
}

print O "EVENT";
foreach $samples (sort keys %samples){
    print O "\t$samples";
}
print O "\n";

foreach $event (sort keys %mappability){
    print O "$event";
    foreach $sample (sort keys %samples){
	$eEI=$corrected_reads{$event}{EI1}{$sample};
	$eIE=$corrected_reads{$event}{EI2}{$sample};
	$eEE=$corrected_reads{$event}{EE}{$sample};
	
	$rEI=$raw_reads{$event}{EI1}{$sample};
	$rIE=$raw_reads{$event}{EI2}{$sample};
	$rEE=$raw_reads{$event}{EE}{$sample};

	$rEI=0 if !$raw_reads{$event}{EI1}{$sample};
	$rIE=0 if !$raw_reads{$event}{EI2}{$sample};
	$rEE=0 if !$raw_reads{$event}{EE}{$sample};
	
	$reads="$rEI=$rIE=$rEE"; # string with the raw read counts for the three junctions

	### Corresponds to Q1 in other events
	$Q="N";
	$Q="VLOW" if (($rEI>=5 && $rIE>=10) || ($rEI>=10 && $rIE>=5) || $rEE>=10);
	$Q="LOW" if (($rEI>=10 && $rIE>=15) || ($rEI>=15 && $rIE>=10) || $rEE>=15);
	$Q="OK" if (($rEI>=15 && $rIE>=20) || ($rEI>=20 && $rIE>=15) || $rEE>=20);
	$Q="SOK" if ((($rEI>=15 && $rIE>=20) || ($rEI>=20 && $rIE>=15) || $rEE>=20) && ($rEI+$rIE+$rEE)>=100);

	### Includes keys 2,3 and 4 of other events, but only 2 is real. 3 is always "NA" and "Reads" is just all the reads. The 5th key would be Ulrich's imbalanced test (OK, N)  
	if ((($eEI>=15 && $eIE>=20) || ($eEI>=20 && $eIE>=15) || $eEE>=20) && ($eEI+$eIE+$eEE)>=100){
	    $Q.=",SOK,NA,$reads";
	}
	elsif (($eEI>=15 && $eIE>=20) || ($eEI>=20 && $eIE>=15) || $eEE>=20){
	    $Q.=",OK,NA,$reads";
	}
	elsif (($eEI>=10 && $eIE>=15) || ($eEI>=15 && $eIE>=10) || $eEE>=15){
	    $Q.=",LOW,NA,$reads";
	}
	elsif (($eEI>=5 && $eIE>=10) || ($eEI>=10 && $eIE>=5) || $eEE>=10){
	    $Q.=",VLOW,NA,$reads";
	}
	else {
	    $Q.=",N,NA,$reads";
	}
	
	### If any of the three junctions is "ne" (=no mappability) the whole KEY is turned into N's
	$Q="N,N,N,ne" if ($rIE eq "ne" || $rEI eq "ne" || $rEE eq "ne");
	
	print O "\t$Q"; ### Add 5th key based on Ulrich's imbalanced test
    }
    print O "\n";
}
